// <auto-generated />
using System;
using CocktailStrategist.Data;
using CocktailStrategist.Data.Enum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CocktailStrategist.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241128131345_recipeWork")]
    partial class recipeWork
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "ingredientCategory", new[] { "base_spirits", "bitters_and_waters", "botanical_liqueurs", "citrus", "dairy_and_eggs", "dessert_liqueurs", "fermented", "fruit_liqueurs", "herbs_and_spices", "other", "pantry", "produce_and_juice", "secondary_base_spirits", "soft_drinks", "spice_and_nut_liqueurs", "syrups_and_sweeteners" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CocktailStrategist.Data.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFav")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToTry")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isHidden")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("CocktailStrategist.Data.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<IngredientCategory>("Category")
                        .HasColumnType("\"ingredientCategory\"");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("CocktailStrategist.Data.IngredientUsage", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Measurement")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)");

                    b.HasKey("IngredientId", "Measurement", "Amount");

                    b.ToTable("IngredientUsages");
                });

            modelBuilder.Entity("CocktailStrategist.Data.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("DrinkIngredient", b =>
                {
                    b.Property<Guid>("DrinksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.HasKey("DrinksId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("DrinkIngredient");
                });

            modelBuilder.Entity("IngredientUsageRecipe", b =>
                {
                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientUsagesIngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("IngredientUsagesMeasurement")
                        .HasColumnType("text");

                    b.Property<decimal>("IngredientUsagesAmount")
                        .HasColumnType("numeric(4,2)");

                    b.HasKey("RecipesId", "IngredientUsagesIngredientId", "IngredientUsagesMeasurement", "IngredientUsagesAmount");

                    b.HasIndex("IngredientUsagesIngredientId", "IngredientUsagesMeasurement", "IngredientUsagesAmount");

                    b.ToTable("IngredientUsageRecipe");
                });

            modelBuilder.Entity("CocktailStrategist.Data.IngredientUsage", b =>
                {
                    b.HasOne("CocktailStrategist.Data.Ingredient", "Ingredient")
                        .WithMany("IngredientUsages")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CocktailStrategist.Data.Recipe", b =>
                {
                    b.HasOne("CocktailStrategist.Data.Drink", "Drink")
                        .WithMany("Recipes")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("DrinkIngredient", b =>
                {
                    b.HasOne("CocktailStrategist.Data.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailStrategist.Data.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientUsageRecipe", b =>
                {
                    b.HasOne("CocktailStrategist.Data.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailStrategist.Data.IngredientUsage", null)
                        .WithMany()
                        .HasForeignKey("IngredientUsagesIngredientId", "IngredientUsagesMeasurement", "IngredientUsagesAmount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailStrategist.Data.Drink", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("CocktailStrategist.Data.Ingredient", b =>
                {
                    b.Navigation("IngredientUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
